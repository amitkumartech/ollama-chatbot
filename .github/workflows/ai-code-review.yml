name: Ollama AI PR Review (Bot-Only)

on:
  pull_request:
    types: [opened, synchronize]

jobs:
  review:
    # Runner must have Ollama + jq installed and be labelled "self-hosted"
    runs-on: [self-hosted, windows, ollama] # <-- add the OS label

    steps:
      # 1. Checkout code -------------------------------------------------------
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # full history; merge base always available

      # Quick probe - show which program GitHub is executing
      - name: Probe current shell
        shell: pwsh
        run: |
          Write-Host "GitHub picked: $($PSVersionTable.PSEdition)  (if this prints Core or Desktop, you are in PowerShell)"
          Write-Host "Bash in PATH? $(where.exe bash 2>$null)"

      # 2. Generate the PR diff -----------------------------------------------
      - name: Produce diff
        id: diff
        shell: pwsh
        run: |
          $BASE_REF = "${{ github.base_ref }}"
          git fetch --depth 1 origin $BASE_REF
          git diff origin/$BASE_REF...HEAD -- '*.ts' '*.html' '*.scss' |
            Out-File -Encoding utf8 pr.diff

          "DIFF<<EOF"            | Out-File -Encoding utf8 -Append $env:GITHUB_OUTPUT
          Get-Content pr.diff    | Out-File -Encoding utf8 -Append $env:GITHUB_OUTPUT
          "EOF"                  | Out-File -Encoding utf8 -Append $env:GITHUB_OUTPUT
      #test jq version
      - name: Confirm jq availability
        shell: pwsh
        run: |
          Write-Host "Checking jq version..."
          try {
            $jqVersion = jq --version
            Write-Host "✅ jq found: $jqVersion"
          } catch {
            Write-Host "❌ jq not found or not in PATH"
            exit 1
          }

      # 3. Ask Ollama for a code review ---------------------------------------
      - name: Query local LLM via Ollama
        id: review
        shell: pwsh
        run: |
          Write-Host "Checking jq version..."
          try {
            $jqVersion = jq --version
            Write-Host "✅ jq found: $jqVersion"
          } catch {
            Write-Host "❌ jq not found or not in PATH"
            exit 1
          }

          $ErrorActionPreference = "Stop"

          # ---- build prompt -------------------------------------------------
          $prompt = @'
          You are a senior Angular/TypeScript reviewer. Identify bugs, missing unit tests,
          performance issues, and accessibility concerns. Respond in GitHub-flavored
          Markdown bullets.
          '@

          $diffText = @"
          ${{ steps.diff.outputs.DIFF }}
          "@

          $fullPrompt = "$prompt`n`n----- DIFF START -----`n$diffText`n----- DIFF END -----"

          # ---- build payload object safely ---------------------------------
          $payloadObj = @{
            model  = 'gemma:2b'
            prompt = $fullPrompt
            stream = $false            # or $true for token streaming
          }

          $payload = $payloadObj | ConvertTo-Json -Depth 4 -Compress

          Write-Host "DEBUG Payload JSON => $payload"   # should show non‑null string

          # ---- call Ollama --------------------------------------------------
          $response = curl -s http://localhost:11434/api/generate `
            -H "Content-Type: application/json" `
            -d $payload
          Write-Host "DEBUG Response JSON => $response" # should show non‑null string
          Write-Host "✅ response prepared  ($response)"
          $reviewText = $response | ForEach-Object {
            try { ( $_ | ConvertFrom-Json ).response } catch { "" }
          } | Where-Object { $_ } | Out-String
          Write-Host "✅ reviewText prepared ($reviewText)"
          $reviewText = $reviewText -replace "`r", ""

          # ----- expose for next step --------------------------------------------
          @"
          REVIEW<<EOF
          $reviewText
          EOF
          "@ | Out-File -FilePath $env:GITHUB_OUTPUT -Append -Encoding utf8

      # 4. Post comment via GitHub REST API ------------------------------------
      - name: Post review comment
        shell: pwsh
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          $ErrorActionPreference = "Stop"

          # Build JSON payload for the GitHub API
          $bodyJson = @{
            body = "${{ steps.review.outputs.REVIEW }}"
          } | ConvertTo-Json -Compress

          # Post the comment
          curl -s -X POST `
            -H "Authorization: Bearer $env:GH_TOKEN" `
            -H "Accept: application/vnd.github+json" `
            -d $bodyJson `
            "https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/comments"
